{"meta":{"title":"Corleone","subtitle":"Charon_","description":"","author":"Corleone","url":"http://J-Corleone.github.io","root":"/"},"pages":[{"title":"404","date":"2022-05-24T20:36:26.000Z","updated":"2022-05-25T03:36:55.994Z","comments":true,"path":"404/index.html","permalink":"http://j-corleone.github.io/404/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-05-24T20:32:11.000Z","updated":"2022-05-25T06:47:21.557Z","comments":true,"path":"contact/index.html","permalink":"http://j-corleone.github.io/contact/index.html","excerpt":"","text":"本功能暂未开通你可以自言自语🤪"},{"title":"about","date":"2022-05-24T20:29:56.000Z","updated":"2022-05-25T07:19:24.322Z","comments":true,"path":"about/index.html","permalink":"http://j-corleone.github.io/about/index.html","excerpt":"","text":"这里有东西吗"},{"title":"categories","date":"2022-05-24T20:26:33.000Z","updated":"2022-05-24T20:31:50.794Z","comments":true,"path":"categories/index.html","permalink":"http://j-corleone.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-05-24T20:28:28.000Z","updated":"2022-05-24T20:31:18.183Z","comments":true,"path":"tags/index.html","permalink":"http://j-corleone.github.io/tags/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-05-24T20:33:19.000Z","updated":"2022-05-24T20:33:44.509Z","comments":true,"path":"friends/index.html","permalink":"http://j-corleone.github.io/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"my first blog","slug":"my first blog","date":"2022-05-29T04:13:42.000Z","updated":"2022-05-27T10:57:20.434Z","comments":true,"path":"2022/05/29/my-first-blog/","link":"","permalink":"http://j-corleone.github.io/2022/05/29/my-first-blog/","excerpt":"","text":"为什么第一行写不了中文在第一行一打汉字就会跑到上边，只能先打几个数字然后再在数字后面打汉字","categories":[],"tags":[]},{"title":"送别","slug":"送别","date":"2022-05-26T16:20:14.000Z","updated":"2022-05-26T16:41:06.669Z","comments":true,"path":"2022/05/27/song-bie/","link":"","permalink":"http://j-corleone.github.io/2022/05/27/song-bie/","excerpt":"","text":"1915年，李叔同所作，4年后出家，法号“弘一法师” 送别长亭外，古道边，芳草碧连天 晚风拂柳笛声残，夕阳山外山 天之涯，地之角，知交半零落 一壶浊酒尽余欢，今宵别梦寒","categories":[],"tags":[{"name":"诗歌","slug":"诗歌","permalink":"http://j-corleone.github.io/tags/%E8%AF%97%E6%AD%8C/"}]},{"title":"动态规划","slug":"DP","date":"2022-05-26T04:08:28.000Z","updated":"2022-05-26T06:58:05.933Z","comments":true,"path":"2022/05/26/dp/","link":"","permalink":"http://j-corleone.github.io/2022/05/26/dp/","excerpt":"","text":"$\\mathcal{DP}$循环顺序：阶段、状态、决策； 时间复杂度：状态数量 $\\times$ 状态转移的计算量； 一、线性DP1. 数字三角形模型 ７ ３ ８ ８ １ ０ ２ ７ ４ ４ ４ ５ ２ ６ ５ 给定一个数字三角形，如上，在这个三角形中寻找一条从顶部到底边的路径，使得路径上所经过的数字之和最大。路径上的每一步都只能往左下或右下走。求出这个最大和。 2. 最长上升子序列模型 186 186 150 200 160 130 197 220 1.上升；2.下降；3.先上升后下降； 反链：为一个点的集合，其中所有点两两不可达； 3. 背包01背包每个物品只有一个 求max 给不相干的初始化为-inf; 求min 初始化为inf; ==优化滚动数组== ==优化成一维== 01背包始终需要从i-1阶段转移到i阶段！ 求方案数只需把 max 换成 + 就🆗了 完全背包每个物品无限个 $f[i][j]=\\left{ \\begin{matrix}f[i-1][j]，未选过第i个物品\\ \\ \\ \\f[i][j-v[i]]，从第i个物品中选一个 \\end{matrix} \\right.$ 注意到第二步是在当前阶段中转移，优化到一维后不需要倒序 memset(f, 0xcf, sizeof f) 置为-INF（cause溢出了 int 范围） 多重背包每个物品有Ci个 ==直接拆分法== 将每种物品看作独立的Ci个物品，转化为 $\\sum_{i=1}^NC_i$ 个物品的0/1 背包问题； 时间复杂度：$\\mathcal{O(M*\\sum_{i=1}^N C_i)}$ ； for(int i=1; i&lt;=n; i++) for(int j=1; j&lt;=c[i]; j++) for(int k=m; k&gt;=v[i]; k--) f[k] = max(f[k], f[k-v[i]]+w[i]); ==二进制拆分法== 把每种物品拆成 $\\log C_i$ 个； 从 k 个 2 的整数次幂 $2^0,2^1,2^2,…,2^{k-1}$ 中选出若干个相加，可以表示出 $0\\sim 2^k-1$之间的任何整数 假设我们有整数p满足 $2^0+2^1+…+2^p\\leq C_i$ ； 令 $R_i=C_i-2^0-2^1-…-2^p$ ； 因为 $2^0+2^1+…+2^p=2^{p+1}-1$ ，这些数可以表示 $[0,2^{p+1}-1]$ 范围内的数； 在此基础上加上 $R_i$ 即可表示出 $[R_i,R_i+2^{p+1}-1]$ 之间的整数，而 $R_i+2^{p+1}-1=C_i$ ,故在此基础上可表示出 $[R_i,C_i]$ 中的任何数； 由于 $\\begin{cases} 2^0+2^1+…+2^p+2^{p+1}&gt;C_i &amp; \\ C_i=2^0+2^1+…+2^p+R_i &amp;\\end{cases} \\Longrightarrow 2^{p+1}&gt;R_i$ ，从而 $R_i\\leq2^{p+1}-1$ ，故两个区间没有遗漏的覆盖了 $[0, C_i]$ 综上，我们可以把数量为 $C_i$ 的第i 种物品拆成 p+2 个物品（0~p有p+1个，再加上 Ri） ==单调队列== 分组背包每组物品有很多种，每种一个 4. 区间DP阶段：len=r-l+1 二、状态机![](https://gitee.com/csJager/picture__bed/raw/master/屏幕截图 2022-02-04 154523.png) 三、状态压缩DP1. 棋盘类 终于知道为什么==棋盘左边==是==二进制低位==了： 因为 遍历二进制数 的方向是从 低—&gt;高 而我们 观察棋盘 是从 左—&gt;右 第 i-1行状态：a，第i行状态：b； 判断上下两行没有相邻：a&amp;b==0； 判断左右没有相邻：a|b不能有相邻的1； 弹幕说也可以判(a&lt;&lt;1&amp;b)==0 &amp;&amp; (a&gt;&gt;1&amp;b)==0，即 是否与右边相邻、是否与左边相邻（左右参考状态 b） 判断自身是否相邻：x&amp;x&gt;&gt;1 ；（来自抽风大佬） 2. 集合类四、区间DP 原型题：石子合并 环形区间转化成一条链 记录方案数 和高精度结合 二维区间dp 五、数位DP预处理处用DP // 模板 #include &lt;vector&gt; // int l, r; int f[N][N]; void init() // 左分支的预处理，通常用dp实现 {} int dp(int n) // 模板 { if(!n) return _; vector&lt;int&gt; nums; while(n) nums.push_back(n%B), n/=B; int res=0; // 结果 int last=0; // for(int i=nums.size()-1; i&gt;=0; i--) { int x=nums[i]; } return res; } int main() { init(); cin&gt;&gt;l&gt;&gt;r; cout&lt;&lt;dp(r)-dp(l-1)&lt;&lt;endl; return 0; }","categories":[],"tags":[{"name":"DP","slug":"DP","permalink":"http://j-corleone.github.io/tags/DP/"},{"name":"算法","slug":"算法","permalink":"http://j-corleone.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-05-24T14:29:13.025Z","updated":"2022-05-24T14:29:13.025Z","comments":true,"path":"2022/05/24/hello-world/","link":"","permalink":"http://j-corleone.github.io/2022/05/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"诗歌","slug":"诗歌","permalink":"http://j-corleone.github.io/tags/%E8%AF%97%E6%AD%8C/"},{"name":"DP","slug":"DP","permalink":"http://j-corleone.github.io/tags/DP/"},{"name":"算法","slug":"算法","permalink":"http://j-corleone.github.io/tags/%E7%AE%97%E6%B3%95/"}]}